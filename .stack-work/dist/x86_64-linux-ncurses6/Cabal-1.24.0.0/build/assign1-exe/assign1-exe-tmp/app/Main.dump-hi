
==================== FINAL INTERFACE ====================
2017-01-30 16:34:03.283652735 UTC

interface main@main:Main 8001
  interface hash: fb593343ec7324167d4953bc241e38da
  ABI hash: 20687031b89345c1e947b4eb5d7b69ed
  export-list hash: 10a8cffe87628cb758c2fc3ffa344be1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 739088c1e7d67abd4507dff405afbe21
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      assign1-0.1.0.0@assign1-0.1.0.0-AYX7x0xw8taFPfaDIqX2Ru base-4.9.0.0
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  assign1-0.1.0.0@assign1-0.1.0.0-AYX7x0xw8taFPfaDIqX2Ru:Parser 614d7715fd732ef9b153a928e5d550b8
import  -/  assign1-0.1.0.0@assign1-0.1.0.0-AYX7x0xw8taFPfaDIqX2Ru:Scanner 19bd5cb0106c2092753edca06272f18e
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b65ac69f77fbda4344fe3fea24ad7494
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
70441ad26801f97d26c211181e02f61b
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hGetContents1
                        GHC.IO.Handle.FD.stdin
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case (Parser.parseInput_happyNewToken
                            0#
                            (Parser.notHappyAtAll @ Parser.Happy_IntList)
                            (Parser.notHappyAtAll
                               @ (Parser.HappyStk
                                    (Parser.HappyAbsSyn
                                       Parser.Prog
                                       [Parser.Decl]
                                       [Parser.Stmt]
                                       Parser.Type
                                       Parser.Decl
                                       Parser.Stmt
                                       Parser.ElseBlock
                                       Parser.Expr)))
                            (Scanner.scanToken ipv1))
                           `cast`
                         (Parser.N:HappyIdentity[0]
                              (UnsafeCo representational (Parser.HappyAbsSyn
                                                            Parser.Prog
                                                            [Parser.Decl]
                                                            [Parser.Stmt]
                                                            Parser.Type
                                                            Parser.Decl
                                                            Parser.Stmt
                                                            Parser.ElseBlock
                                                            Parser.Expr) Parser.Prog)) of ww2 { Parser.Prog ww3 ww4 ->
                    Parser.$w$cshowsPrec4 0# ww3 ww4 (GHC.Types.[] @ GHC.Types.Char) })
                   GHC.Types.True
                   ipv }) -}
c6f322e76742d567b8b65010e2876eba
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

