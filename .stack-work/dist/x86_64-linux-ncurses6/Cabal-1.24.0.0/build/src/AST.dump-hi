
==================== FINAL INTERFACE ====================
2017-02-13 01:00:49.522670457 UTC

interface assign2-0.1.0.0-HR9hU8cIXLf43tgzC2vdOI:AST 8001
  interface hash: bd9609b90468f38764a71295211ee716
  ABI hash: f3801c3ddccaad22ff6272fe0c886a92
  export-list hash: 2b09893de07e573487a38dddb47ef3ca
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3eae81af6af509d189de115e6caf048f
  sig of: Nothing
  used TH splices: False
  where
exports:
  AST.prettyPrint
  AST.Decl{AST.D_Decl}
  AST.ElseBlock{AST.B_Else AST.B_Endif}
  AST.Expr{AST.E_Add AST.E_Div AST.E_Float AST.E_Iden AST.E_Int AST.E_Mult AST.E_Paren AST.E_String AST.E_Sub AST.E_UMinus}
  AST.Prog{AST.Prog}
  AST.Stmt{AST.S_Assign AST.S_If AST.S_Print AST.S_Read AST.S_While}
  AST.Type{AST.T_Float AST.T_Int AST.T_String}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fEqDecl :: GHC.Classes.Eq AST.Decl
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Decl AST.$fEqDecl_$c==1 AST.$fEqDecl_$c/= -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fEqDecl_$c/= :: AST.Decl -> AST.Decl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Decl) (w1 :: AST.Decl) ->
                 case w of ww { AST.D_Decl ww1 ww2 ->
                 case w1 of ww3 { AST.D_Decl ww4 ww5 ->
                 AST.$w$c/= ww1 ww2 ww4 ww5 } }) -}
8bef53793e07be01a303320dfb26df68
  $fEqDecl_$c== :: AST.Expr -> AST.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fEqDecl_$c==1 :: AST.Decl -> AST.Decl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Decl) (w1 :: AST.Decl) ->
                 case w of ww { AST.D_Decl ww1 ww2 ->
                 case w1 of ww3 { AST.D_Decl ww4 ww5 ->
                 AST.$w$c== ww1 ww2 ww4 ww5 } }) -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fEqDecl_$c==2 :: AST.Type -> AST.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: AST.Type) (ds1 :: AST.Type) ->
                 case ds of wild {
                   AST.T_Int
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False AST.T_Int -> GHC.Types.True }
                   AST.T_Float
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False AST.T_Float -> GHC.Types.True }
                   AST.T_String
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False AST.T_String -> GHC.Types.True } }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqElseBlock :: GHC.Classes.Eq AST.ElseBlock
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.ElseBlock AST.$fEqElseBlock_$c== AST.$fEqElseBlock_$c/= -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqElseBlock_$c/= ::
    AST.ElseBlock -> AST.ElseBlock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: AST.ElseBlock) (b :: AST.ElseBlock) ->
                 case a of wild {
                   AST.B_Endif
                   -> case b of wild1 {
                        AST.B_Endif -> GHC.Types.False AST.B_Else ipv -> GHC.Types.True }
                   AST.B_Else a1
                   -> case b of wild1 {
                        AST.B_Endif -> GHC.Types.True
                        AST.B_Else b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ AST.Stmt
                                  AST.$fEqStmt
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqElseBlock_$c== ::
    AST.ElseBlock -> AST.ElseBlock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: AST.ElseBlock) (ds1 :: AST.ElseBlock) ->
                 case ds of wild {
                   AST.B_Endif
                   -> case ds1 of wild1 {
                        AST.B_Endif -> GHC.Types.True AST.B_Else ipv -> GHC.Types.False }
                   AST.B_Else a1
                   -> case ds1 of wild1 {
                        AST.B_Endif -> GHC.Types.False
                        AST.B_Else b1
                        -> GHC.Classes.$fEq[]_$c== @ AST.Stmt AST.$fEqStmt a1 b1 } }) -}
8bef53793e07be01a303320dfb26df68
  $fEqExpr :: GHC.Classes.Eq AST.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ AST.Expr AST.$fEqDecl_$c== AST.$fEqExpr_$c/= -}
8bef53793e07be01a303320dfb26df68
  $fEqExpr_$c/= :: AST.Expr -> AST.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AST.Expr) (b :: AST.Expr) ->
                 case AST.$fEqDecl_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cb4921f051f377cb1edf4347c01a4db9
  $fEqProg :: GHC.Classes.Eq AST.Prog
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ AST.Prog AST.$fEqProg_$c== AST.$fEqProg_$c/= -}
cb4921f051f377cb1edf4347c01a4db9
  $fEqProg_$c/= :: AST.Prog -> AST.Prog -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AST.Prog) (b :: AST.Prog) ->
                 case AST.$fEqProg_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cb4921f051f377cb1edf4347c01a4db9
  $fEqProg_$c== :: AST.Prog -> AST.Prog -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Prog) (w1 :: AST.Prog) ->
                 case w of ww { AST.Prog ww1 ww2 ->
                 case w1 of ww3 { AST.Prog ww4 ww5 ->
                 AST.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqStmt :: GHC.Classes.Eq AST.Stmt
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ AST.Stmt AST.$fEqStmt_$c== AST.$fEqStmt_$c/= -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqStmt_$c/= :: AST.Stmt -> AST.Stmt -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AST.Stmt) (b :: AST.Stmt) ->
                 case AST.$fEqStmt_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fEqStmt_$c== :: AST.Stmt -> AST.Stmt -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fEqType :: GHC.Classes.Eq AST.Type
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Type AST.$fEqDecl_$c==2 AST.$fEqType_$c/= -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fEqType_$c/= :: AST.Type -> AST.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: AST.Type) (b :: AST.Type) ->
                 case a of wild {
                   AST.T_Int
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True AST.T_Int -> GHC.Types.False }
                   AST.T_Float
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True AST.T_Float -> GHC.Types.False }
                   AST.T_String
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True AST.T_String -> GHC.Types.False } }) -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fShowDecl :: GHC.Show.Show AST.Decl
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Decl
                  AST.$fShowDecl_$cshowsPrec
                  AST.$fShowDecl_$cshow
                  AST.$fShowDecl_$cshowList -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fShowDecl1 :: AST.Decl -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: AST.Decl) ->
                 case w of ww { AST.D_Decl ww1 ww2 ->
                 AST.$w$cshowsPrec 0# ww1 ww2 }) -}
c0005a9cfb4414a72b00dc0cb981d476
  $fShowDecl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T_String"#) -}
56969690ced086f19053af1fb0d55f94
  $fShowDecl3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T_Float"#) -}
303f1e64a7bd8e4225ceef9470d4f5f4
  $fShowDecl4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "T_Int"#) -}
b463cfd6eb42a6068eb1e0f31b59f46f
  $fShowDecl5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "D_Decl "#) -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fShowDecl_$cshow :: AST.Decl -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AST.Decl) ->
                 AST.$fShowDecl_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fShowDecl_$cshowList :: [AST.Decl] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ AST.Decl AST.$fShowDecl1) -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  $fShowDecl_$cshowsPrec ::
    GHC.Types.Int -> AST.Decl -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: AST.Decl) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { AST.D_Decl ww3 ww4 ->
                 AST.$w$cshowsPrec ww1 ww3 ww4 } }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock :: GHC.Show.Show AST.ElseBlock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.ElseBlock
                  AST.$fShowElseBlock_$cshowsPrec
                  AST.$fShowElseBlock_$cshow
                  AST.$fShowElseBlock_$cshowList -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock1 :: AST.ElseBlock -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (AST.$fShowElseBlock_$cshowsPrec
                   AST.$fShowElseBlock2) -}
6e9da29a1de4b7fa41dd3e8a56c4a6b6
  $fShowElseBlock2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock3 :: AST.Stmt -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: AST.Stmt) -> AST.$w$cshowsPrec2 0# w) -}
7e140b162b2bd92b4c8fb84946a15c29
  $fShowElseBlock4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B_Else "#) -}
4a0ee563a86d6b5597cb10ed8c655af2
  $fShowElseBlock5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B_Endif"#) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock_$cshow :: AST.ElseBlock -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: AST.ElseBlock) ->
                 case x of wild {
                   AST.B_Endif -> AST.$fShowElseBlock5
                   AST.B_Else b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        AST.$fShowElseBlock4
                        (GHC.Show.showList__
                           @ AST.Stmt
                           AST.$fShowElseBlock3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock_$cshowList :: [AST.ElseBlock] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ AST.ElseBlock
                   AST.$fShowElseBlock1) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowElseBlock_$cshowsPrec ::
    GHC.Types.Int -> AST.ElseBlock -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
8bef53793e07be01a303320dfb26df68
  $fShowExpr :: GHC.Show.Show AST.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Expr
                  AST.$fShowExpr_$cshowsPrec
                  AST.$fShowExpr_$cshow
                  AST.$fShowExpr_$cshowList -}
8bef53793e07be01a303320dfb26df68
  $fShowExpr1 :: AST.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: AST.Expr) -> AST.$w$cshowsPrec1 0# w) -}
8bef53793e07be01a303320dfb26df68
  $fShowExpr_$cshow :: AST.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AST.Expr) ->
                 AST.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8bef53793e07be01a303320dfb26df68
  $fShowExpr_$cshowList :: [AST.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ AST.Expr AST.$fShowExpr1) -}
8bef53793e07be01a303320dfb26df68
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: AST.Expr) ->
                 case w of ww { GHC.Types.I# ww1 -> AST.$w$cshowsPrec1 ww1 w1 }) -}
cb4921f051f377cb1edf4347c01a4db9
  $fShowProg :: GHC.Show.Show AST.Prog
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Prog
                  AST.$fShowProg_$cshowsPrec
                  AST.$fShowProg_$cshow
                  AST.$fShowProg_$cshowList -}
cb4921f051f377cb1edf4347c01a4db9
  $fShowProg1 :: AST.Prog -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: AST.Prog) (w1 :: GHC.Base.String) ->
                 case w of ww { AST.Prog ww1 ww2 ->
                 AST.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
8e7994ac86b927964007dcf5c0763b55
  $fShowProg2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prog "#) -}
cb4921f051f377cb1edf4347c01a4db9
  $fShowProg_$cshow :: AST.Prog -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AST.Prog) ->
                 AST.$fShowProg_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cb4921f051f377cb1edf4347c01a4db9
  $fShowProg_$cshowList :: [AST.Prog] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ AST.Prog AST.$fShowProg1) -}
cb4921f051f377cb1edf4347c01a4db9
  $fShowProg_$cshowsPrec ::
    GHC.Types.Int -> AST.Prog -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: AST.Prog) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { AST.Prog ww3 ww4 ->
                 AST.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowStmt :: GHC.Show.Show AST.Stmt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Stmt
                  AST.$fShowStmt_$cshowsPrec
                  AST.$fShowStmt_$cshow
                  AST.$fShowStmt_$cshowList -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowStmt_$cshow :: AST.Stmt -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AST.Stmt) ->
                 AST.$fShowStmt_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowStmt_$cshowList :: [AST.Stmt] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ AST.Stmt AST.$fShowElseBlock3) -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $fShowStmt_$cshowsPrec ::
    GHC.Types.Int -> AST.Stmt -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: AST.Stmt) ->
                 case w of ww { GHC.Types.I# ww1 -> AST.$w$cshowsPrec2 ww1 w1 }) -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fShowType :: GHC.Show.Show AST.Type
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ AST.Type
                  AST.$fShowType_$cshowsPrec
                  AST.$fShowType_$cshow
                  AST.$fShowType_$cshowList -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fShowType_$cshow :: AST.Type -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: AST.Type) ->
                 case x of wild {
                   AST.T_Int -> AST.$fShowDecl4
                   AST.T_Float -> AST.$fShowDecl3
                   AST.T_String -> AST.$fShowDecl2 }) -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fShowType_$cshowList :: [AST.Type] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ AST.Type AST.$w$cshowsPrec4) -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $fShowType_$cshowsPrec ::
    GHC.Types.Int -> AST.Type -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: AST.Type) (w2 :: GHC.Base.String) ->
                 AST.$w$cshowsPrec4 w1 w2) -}
061f5fea3394f1b1a369dd89f37ae952
  $tc'B_Else :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6312272586119306502##
                   13380520164242202699##
                   AST.$trModule
                   AST.$tc'B_Else1) -}
daca0c27e98c9956a658292ec13fdc09
  $tc'B_Else1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'B_Else"#) -}
fa82404699198aba79592c8ae6c57572
  $tc'B_Endif :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10951892235132642911##
                   10126445545832840130##
                   AST.$trModule
                   AST.$tc'B_Endif1) -}
cfe0a914df07d2ce583590ed1c030ed5
  $tc'B_Endif1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'B_Endif"#) -}
f9a24fed8ba7d9a8523b3e5b8c950a1c
  $tc'D_Decl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11220464158820188789##
                   3527733301584792919##
                   AST.$trModule
                   AST.$tc'D_Decl1) -}
9e3788e0bcb0ddf03eb05064b0cc48a2
  $tc'D_Decl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'D_Decl"#) -}
c7453ef30a32aa4ada869cf7dd9055b1
  $tc'E_Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17975388305836886266##
                   2453424147766560819##
                   AST.$trModule
                   AST.$tc'E_Add1) -}
7c15d4e35c553b8e1ce7cf8791851683
  $tc'E_Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Add"#) -}
488ed0bc953a3c3abd0f1833ec893601
  $tc'E_Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14989812259478594786##
                   8348415314940562822##
                   AST.$trModule
                   AST.$tc'E_Div1) -}
f526920ca78629a72d65bc9dd7fbcf30
  $tc'E_Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Div"#) -}
07c8bd193a08eba38833f1b81c17247b
  $tc'E_Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18384584870968004164##
                   5315587954094978085##
                   AST.$trModule
                   AST.$tc'E_Float1) -}
c1176cff2ae5d86b25bc2f17afc02f18
  $tc'E_Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Float"#) -}
042a3f874ddcc3e9c6ad5a6844833351
  $tc'E_Iden :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1011192224790891637##
                   10119865161029911583##
                   AST.$trModule
                   AST.$tc'E_Iden1) -}
ee87dd6c14eaf167e1cecd697fa2f468
  $tc'E_Iden1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Iden"#) -}
25bfb70ee82d4e2de97883cb81e318b8
  $tc'E_Int :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3614929764691365111##
                   14444714037926270926##
                   AST.$trModule
                   AST.$tc'E_Int1) -}
b64766513b33ed037d38dcd9981e901f
  $tc'E_Int1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Int"#) -}
caa4eaa79792abed772729033fa1e7cb
  $tc'E_Mult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8936707193473830264##
                   5565158319280018517##
                   AST.$trModule
                   AST.$tc'E_Mult1) -}
efd224bc709b01e3b78a262fb6b0e411
  $tc'E_Mult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Mult"#) -}
df4f8aea28751dd8070b06a423c19db2
  $tc'E_Paren :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2009878124030070342##
                   12218374815651260455##
                   AST.$trModule
                   AST.$tc'E_Paren1) -}
0598bfbc1531761924d0b8b14b21c611
  $tc'E_Paren1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Paren"#) -}
4b3cf5db167b9848df731408103b8177
  $tc'E_String :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17444423502526078399##
                   6876200292827914372##
                   AST.$trModule
                   AST.$tc'E_String1) -}
da80082b40c4de908ad7dd16e8c3d008
  $tc'E_String1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_String"#) -}
82e797b53be24dffbf46435dbf9f50e3
  $tc'E_Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11412180699335323580##
                   10396971781608346227##
                   AST.$trModule
                   AST.$tc'E_Sub1) -}
8d5871f2dd57311a6c49b314867966e6
  $tc'E_Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_Sub"#) -}
37d0b1ffa19dc1522eefb1353b633b55
  $tc'E_UMinus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1143796525220459647##
                   9691576259854394830##
                   AST.$trModule
                   AST.$tc'E_UMinus1) -}
73acc35cee7180293af4f0c437c461a7
  $tc'E_UMinus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E_UMinus"#) -}
2759b420f781761aa303e5ddb311d088
  $tc'Prog :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7791406372311773156##
                   12468125725388096167##
                   AST.$trModule
                   AST.$tc'Prog1) -}
fd049ccadf3f2ffca19926bc62617589
  $tc'Prog1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Prog"#) -}
17818a55e678241176e04e35c1c33fae
  $tc'S_Assign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15736380622749080423##
                   10941999981881899669##
                   AST.$trModule
                   AST.$tc'S_Assign1) -}
48edc4553a15511d7b088236a23343d5
  $tc'S_Assign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S_Assign"#) -}
38bf35d63967b13291c22a21ddd81cfb
  $tc'S_If :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11250706087386691468##
                   16398312896501278233##
                   AST.$trModule
                   AST.$tc'S_If1) -}
bcfd86173dae63a18056522e5c89a877
  $tc'S_If1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S_If"#) -}
79b525620ee6c7eae920e47c603a6f46
  $tc'S_Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7853977475203176597##
                   5175720448048961914##
                   AST.$trModule
                   AST.$tc'S_Print1) -}
8b39fb5e2656fa5935882f83ad7edc77
  $tc'S_Print1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S_Print"#) -}
7b313ae352b18b4a8481d67ab16ecd07
  $tc'S_Read :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1340849518536310521##
                   4451782456663339268##
                   AST.$trModule
                   AST.$tc'S_Read1) -}
b58c56f3a47153b452eed518a70926c7
  $tc'S_Read1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S_Read"#) -}
fad0e6fd393268b98105663a70daba62
  $tc'S_While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16312318878306844535##
                   12644563282626706203##
                   AST.$trModule
                   AST.$tc'S_While1) -}
279ff82fb0c1cabdc0efb6034e8932d4
  $tc'S_While1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'S_While"#) -}
f682b7b9660465f547474cde2f805485
  $tc'T_Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13044445372324246203##
                   13441099156543346238##
                   AST.$trModule
                   AST.$tc'T_Float1) -}
6cfb63bfaee6be3c11aed99cc786207f
  $tc'T_Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T_Float"#) -}
422e82901517e67f8af1c4514e9934c0
  $tc'T_Int :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17801850647180224814##
                   7160146341150652561##
                   AST.$trModule
                   AST.$tc'T_Int1) -}
51998ee88399bc64cfd773a483e445e9
  $tc'T_Int1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T_Int"#) -}
8fcd1f73e72fe3b5b2ac5e98d68d53da
  $tc'T_String :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4160173509505087770##
                   16864426992286691223##
                   AST.$trModule
                   AST.$tc'T_String1) -}
43b50f989008c35e6fb3fc7ec5d3f296
  $tc'T_String1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T_String"#) -}
1493bdea7e37eada71e3446b49f6f368
  $tcDecl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7359760101727700253##
                   3861948380355601089##
                   AST.$trModule
                   AST.$tcDecl1) -}
812eecc38c8ddb35fb42aeda2f455441
  $tcDecl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Decl"#) -}
98f76553f409a9cf1256e0ac46d7f7f5
  $tcElseBlock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   411993042007856476##
                   15850270681203434355##
                   AST.$trModule
                   AST.$tcElseBlock1) -}
e018fa54f99fcd21c06c0e623fd4e9e7
  $tcElseBlock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ElseBlock"#) -}
3909a86cb2179ea6f738a5c12435431e
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10785418496097747974##
                   8012143145643522203##
                   AST.$trModule
                   AST.$tcExpr1) -}
de6a7e63aa825337a3e626f7fcf50ffa
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
d8b69c23fa8d540b60404effed67eeec
  $tcProg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17454327374075713793##
                   14930050199084456695##
                   AST.$trModule
                   AST.$tcProg1) -}
de97a56ca51922758a3a90aca1625859
  $tcProg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prog"#) -}
657877085a4ac72a191d7e3c11998035
  $tcStmt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1830950827712119292##
                   13303588870349390522##
                   AST.$trModule
                   AST.$tcStmt1) -}
cd0823a1714711634079458b0279a10d
  $tcStmt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Stmt"#) -}
885f56139ecb28954b959344b6980200
  $tcType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11624453074918180922##
                   6327147572604940283##
                   AST.$trModule
                   AST.$tcType1) -}
e67645b3c77d06b563ee9c9e0178c537
  $tcType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Type"#) -}
043272114e4e0240bfcaaad14575b004
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module AST.$trModule2 AST.$trModule1) -}
0d2219c48e45b4d059d0bf4156a54055
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AST"#) -}
01df9ead864de4d52eef3cc647fa6e67
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "assign2-0.1.0.0-HR9hU8cIXLf43tgzC2vdOI"#) -}
93cbc7f39e38df7ee76b0f69857c6f6c
  $w$c/= ::
    AST.Expr -> AST.Type -> AST.Expr -> AST.Type -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: AST.Expr)
                   (ww1 :: AST.Type)
                   (ww2 :: AST.Expr)
                   (ww3 :: AST.Type) ->
                 case AST.$fEqDecl_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        AST.T_Int
                        -> case ww3 of wild2 {
                             DEFAULT -> GHC.Types.True AST.T_Int -> GHC.Types.False }
                        AST.T_Float
                        -> case ww3 of wild2 {
                             DEFAULT -> GHC.Types.True AST.T_Float -> GHC.Types.False }
                        AST.T_String
                        -> case ww3 of wild2 {
                             DEFAULT -> GHC.Types.True AST.T_String -> GHC.Types.False } } }) -}
0d2b607203ac2ec0183a0cc3efd56528
  $w$c== ::
    AST.Expr -> AST.Type -> AST.Expr -> AST.Type -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: AST.Expr)
                   (ww1 :: AST.Type)
                   (ww2 :: AST.Expr)
                   (ww3 :: AST.Type) ->
                 case AST.$fEqDecl_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> AST.$fEqDecl_$c==2 ww1 ww3 }) -}
b4153f2ce8a0fe57549bdd0811fb4aa3
  $w$c==1 ::
    [AST.Decl]
    -> [AST.Stmt] -> [AST.Decl] -> [AST.Stmt] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [AST.Decl])
                   (ww1 :: [AST.Stmt])
                   (ww2 :: [AST.Decl])
                   (ww3 :: [AST.Stmt]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ AST.Decl
                        AST.$fEqDecl
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c== @ AST.Stmt AST.$fEqStmt ww1 ww3 }) -}
9b0664e438faaa616f882eb6c267bce2
  $w$cshowsPrec ::
    GHC.Prim.Int# -> AST.Expr -> AST.Type -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: AST.Expr)
                   (ww2 :: AST.Type) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = AST.$w$cshowsPrec1 11# ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       AST.$fShowDecl5
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of wild {
                                AST.T_Int -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl4 x
                                AST.T_Float -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl3 x
                                AST.T_String -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl2 x })))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
8bef53793e07be01a303320dfb26df68
  $w$cshowsPrec1 :: GHC.Prim.Int# -> AST.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
4b97b82783ec2b44ae7a49e3c8fd2ced
  $w$cshowsPrec2 :: GHC.Prim.Int# -> AST.Stmt -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
d7c0b60c9890b7043901d99fd9b7ed94
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> [AST.Decl] -> [AST.Stmt] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [AST.Decl])
                   (ww2 :: [AST.Stmt])
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Show.showList__
                       @ AST.Decl
                       AST.$fShowDecl1
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__ @ AST.Stmt AST.$fShowElseBlock3 ww2 x))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char AST.$fShowProg2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           AST.$fShowProg2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w))) }) -}
e6c7c0df5e6c2bf9f61707eedd35b038
  $w$cshowsPrec4 :: AST.Type -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: AST.Type) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   AST.T_Int -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl4 w1
                   AST.T_Float -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl3 w1
                   AST.T_String
                   -> GHC.Base.++ @ GHC.Types.Char AST.$fShowDecl2 w1 }) -}
5296c2483eb1662b756fc8e7a793f8a0
  $wprettyPrint :: [AST.Decl] -> [AST.Stmt] -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [AST.Decl]) (ww1 :: [AST.Stmt]) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (AST.ppDecls AST.$fShowElseBlock2 ww)
                   (AST.ppStmts AST.$fShowElseBlock2 ww1)) -}
4a22c07fc0f4f3b20fe61bbdde40bcae
  data Decl = D_Decl AST.Expr AST.Type
4b97b82783ec2b44ae7a49e3c8fd2ced
  data ElseBlock = B_Endif | B_Else [AST.Stmt]
8bef53793e07be01a303320dfb26df68
  data Expr
    = E_Paren AST.Expr
    | E_UMinus AST.Expr
    | E_Add AST.Expr AST.Expr
    | E_Sub AST.Expr AST.Expr
    | E_Mult AST.Expr AST.Expr
    | E_Div AST.Expr AST.Expr
    | E_Int GHC.Integer.Type.Integer
    | E_Float GHC.Types.Double
    | E_Iden GHC.Base.String
    | E_String GHC.Base.String
cb4921f051f377cb1edf4347c01a4db9
  data Prog = Prog [AST.Decl] [AST.Stmt]
4b97b82783ec2b44ae7a49e3c8fd2ced
  data Stmt
    = S_Read AST.Expr
    | S_Print AST.Expr
    | S_Assign AST.Expr AST.Expr
    | S_If AST.Expr [AST.Stmt] AST.ElseBlock
    | S_While AST.Expr [AST.Stmt]
e6c7c0df5e6c2bf9f61707eedd35b038
  data Type = T_Int | T_Float | T_String
fcf49448df42c217d032b0fd67f28d01
  ppDecls :: GHC.Types.Int -> [AST.Decl] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S,1*U> -}
c07449802cb4a2f2fdadba800679a6b8
  ppStmts :: GHC.Types.Int -> [AST.Stmt] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S,1*U> -}
b4d74af1fb7f4579960d2977534340ce
  prettyPrint :: AST.Prog -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: AST.Prog) ->
                 case w of ww { AST.Prog ww1 ww2 -> AST.$wprettyPrint ww1 ww2 }) -}
instance [safe] GHC.Classes.Eq [AST.Decl] = AST.$fEqDecl
instance [safe] GHC.Classes.Eq [AST.ElseBlock] = AST.$fEqElseBlock
instance [safe] GHC.Classes.Eq [AST.Expr] = AST.$fEqExpr
instance [safe] GHC.Classes.Eq [AST.Prog] = AST.$fEqProg
instance [safe] GHC.Classes.Eq [AST.Stmt] = AST.$fEqStmt
instance [safe] GHC.Classes.Eq [AST.Type] = AST.$fEqType
instance [safe] GHC.Show.Show [AST.Decl] = AST.$fShowDecl
instance [safe] GHC.Show.Show [AST.ElseBlock] = AST.$fShowElseBlock
instance [safe] GHC.Show.Show [AST.Expr] = AST.$fShowExpr
instance [safe] GHC.Show.Show [AST.Prog] = AST.$fShowProg
instance [safe] GHC.Show.Show [AST.Stmt] = AST.$fShowStmt
instance [safe] GHC.Show.Show [AST.Type] = AST.$fShowType
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

