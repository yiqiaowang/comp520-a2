
==================== FINAL INTERFACE ====================
2017-02-10 17:58:31.566580968 UTC

interface assign2-0.1.0.0-HR9hU8cIXLf43tgzC2vdOI:SymbolTable 8001
  interface hash: a6fa7a01bd1065f28e20b2b9755cf010
  ABI hash: da019e7ad97fb06c4c14a52ce55d64b7
  export-list hash: 236383074e785e53065e2e1cbc425b46
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3eae81af6af509d189de115e6caf048f
  sig of: Nothing
  used TH splices: False
  where
exports:
  SymbolTable.addSym
  SymbolTable.getInfo
  SymbolTable.getSym
  SymbolTable.hasKey
  SymbolTable.newMap
  SymbolTable.parseEntry
  SymbolTable.removeJust
  SymbolTable.toString
  Data.Map.Base.toList
  SymbolTable.Entry{SymbolTable.Entry}
  SymbolTable.IdName
  SymbolTable.IdType
  SymbolTable.IdValue{SymbolTable.ValEmpty SymbolTable.ValFloat SymbolTable.ValInteger SymbolTable.ValStr}
module dependencies: AST
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  AST f3801c3ddccaad22ff6272fe0c886a92
  exports: 2b09893de07e573487a38dddb47ef3ca
  T_Float 5cef660a56101ae71d6cabdf23eadba3
  T_Int db4d3c8700cb718cf9f2c28c06141260
  T_String 19e6f970f152e51079200edc21045892
  Type e6c7c0df5e6c2bf9f61707eedd35b038
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
c548569925daeb4ad7769a1b269be0f7
  $fEqEntry :: GHC.Classes.Eq SymbolTable.Entry
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SymbolTable.Entry
                  SymbolTable.$fEqEntry_$c==
                  SymbolTable.$fEqEntry_$c/= -}
c548569925daeb4ad7769a1b269be0f7
  $fEqEntry_$c/= ::
    SymbolTable.Entry -> SymbolTable.Entry -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                AST.$fEqType_$c/=
                  `cast`
                (Sym (SymbolTable.N:Entry[0])
                 ->_R Sym (SymbolTable.N:Entry[0])
                 ->_R <GHC.Types.Bool>_R) -}
c548569925daeb4ad7769a1b269be0f7
  $fEqEntry_$c== ::
    SymbolTable.Entry -> SymbolTable.Entry -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                AST.$fEqDecl_$c==2
                  `cast`
                (Sym (SymbolTable.N:Entry[0])
                 ->_R Sym (SymbolTable.N:Entry[0])
                 ->_R <GHC.Types.Bool>_R) -}
7d5255da21a3678bba31742a6dc29f08
  $fEqIdValue :: GHC.Classes.Eq SymbolTable.IdValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SymbolTable.IdValue
                  SymbolTable.$fEqIdValue_$c==
                  SymbolTable.$fEqIdValue_$c/= -}
7d5255da21a3678bba31742a6dc29f08
  $fEqIdValue_$c/= ::
    SymbolTable.IdValue -> SymbolTable.IdValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: SymbolTable.IdValue) (b :: SymbolTable.IdValue) ->
                 case SymbolTable.$fEqIdValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7d5255da21a3678bba31742a6dc29f08
  $fEqIdValue_$c== ::
    SymbolTable.IdValue -> SymbolTable.IdValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SymbolTable.IdValue)
                   (ds1 :: SymbolTable.IdValue) ->
                 case ds of wild {
                   SymbolTable.ValEmpty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SymbolTable.ValEmpty -> GHC.Types.True }
                   SymbolTable.ValStr a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SymbolTable.ValStr b1 -> GHC.Base.eqString a1 b1 }
                   SymbolTable.ValFloat a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SymbolTable.ValFloat b1 -> GHC.Classes.eqFloat a1 b1 }
                   SymbolTable.ValInteger a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        SymbolTable.ValInteger b1
                        -> GHC.Integer.Type.eqInteger a1 b1 } }) -}
c548569925daeb4ad7769a1b269be0f7
  $fShowEntry :: GHC.Show.Show SymbolTable.Entry
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SymbolTable.Entry
                  SymbolTable.$fShowEntry_$cshowsPrec
                  SymbolTable.$fShowEntry_$cshow
                  SymbolTable.$fShowEntry_$cshowList -}
c548569925daeb4ad7769a1b269be0f7
  $fShowEntry1 :: SymbolTable.Entry -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: SymbolTable.Entry) (w1 :: GHC.Base.String) ->
                 SymbolTable.$w$cshowsPrec 0# w w1) -}
d9181674450964dc770a93a059b6c37b
  $fShowEntry2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Entry "#) -}
c548569925daeb4ad7769a1b269be0f7
  $fShowEntry_$cshow :: SymbolTable.Entry -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SymbolTable.Entry) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n SymbolTable.$fShowEntry2)
                   (AST.$w$cshowsPrec4
                      x `cast` (SymbolTable.N:Entry[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
c548569925daeb4ad7769a1b269be0f7
  $fShowEntry_$cshowList :: [SymbolTable.Entry] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SymbolTable.Entry
                   SymbolTable.$fShowEntry1) -}
c548569925daeb4ad7769a1b269be0f7
  $fShowEntry_$cshowsPrec ::
    GHC.Types.Int -> SymbolTable.Entry -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: SymbolTable.Entry)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SymbolTable.$w$cshowsPrec ww1 w1 w2 }) -}
7d5255da21a3678bba31742a6dc29f08
  $fShowIdValue :: GHC.Show.Show SymbolTable.IdValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SymbolTable.IdValue
                  SymbolTable.$fShowIdValue_$cshowsPrec
                  SymbolTable.$fShowIdValue_$cshow
                  SymbolTable.$fShowIdValue_$cshowList -}
7d5255da21a3678bba31742a6dc29f08
  $fShowIdValue1 :: SymbolTable.IdValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (SymbolTable.$fShowIdValue_$cshowsPrec
                   SymbolTable.$fShowIdValue2) -}
9e8af09161b002a35d73eb6a8148fc64
  $fShowIdValue10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   SymbolTable.$fShowIdValue8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1e5cd4080ad3361aeb8220c974c94551
  $fShowIdValue2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3e8681e1d3ec3b014502ae41296d0d89
  $fShowIdValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ValInteger "#) -}
17ed7f141ec8764ad9c488a0a3b7bc26
  $fShowIdValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ValFloat "#) -}
c1b00980a1231fd40d7a233073b74395
  $fShowIdValue5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
c16cbdc3fa7c4f84c8bb30abfcc42d1e
  $fShowIdValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ValStr "#) -}
fcf077455b8b10570f2d797555421dd9
  $fShowIdValue7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   SymbolTable.$fShowIdValue8) -}
2eeff0469f5c612634a9889a36150d19
  $fShowIdValue8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ValEmpty"#) -}
378957baa8fdd4462d3955c4e6abf87b
  $fShowIdValue9 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7d5255da21a3678bba31742a6dc29f08
  $fShowIdValue_$cshow :: SymbolTable.IdValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: SymbolTable.IdValue) ->
                 case x of wild {
                   SymbolTable.ValEmpty -> SymbolTable.$fShowIdValue10
                   SymbolTable.ValStr b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SymbolTable.$fShowIdValue6
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 SymbolTable.$fShowIdValue9))
                   SymbolTable.ValFloat b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SymbolTable.$fShowIdValue4
                        (case b1 of ww { GHC.Types.F# ww1 ->
                         GHC.Float.$w$sshowSignedFloat1
                           GHC.Float.$fShowFloat_$sshowFloat
                           SymbolTable.$fShowIdValue5
                           ww1
                           (GHC.Types.[] @ GHC.Types.Char) })
                   SymbolTable.ValInteger b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SymbolTable.$fShowIdValue3
                        (case GHC.Show.$w$cshowsPrec3
                                11#
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 }) }) -}
7d5255da21a3678bba31742a6dc29f08
  $fShowIdValue_$cshowList :: [SymbolTable.IdValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SymbolTable.IdValue
                   SymbolTable.$fShowIdValue1) -}
7d5255da21a3678bba31742a6dc29f08
  $fShowIdValue_$cshowsPrec ::
    GHC.Types.Int -> SymbolTable.IdValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int) (ds1 :: SymbolTable.IdValue) ->
                 case ds1 of wild {
                   SymbolTable.ValEmpty -> SymbolTable.$fShowIdValue7
                   SymbolTable.ValStr b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             SymbolTable.$fShowIdValue6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)))
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SymbolTable.$fShowIdValue6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1))))) } }
                   SymbolTable.ValFloat b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { GHC.Types.F# ww1 ->
                          GHC.Float.$w$sshowSignedFloat1
                            GHC.Float.$fShowFloat_$sshowFloat
                            SymbolTable.$fShowIdValue5
                            ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char SymbolTable.$fShowIdValue4 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SymbolTable.$fShowIdValue4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1))) } }
                   SymbolTable.ValInteger b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             SymbolTable.$fShowIdValue3
                             (case GHC.Show.$w$cshowsPrec3 11# b1 x1 of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                SymbolTable.$fShowIdValue3
                                (case GHC.Show.$w$cshowsPrec3
                                        11#
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           x1) of ww2 { (#,#) ww3 ww4 ->
                                 GHC.Types.: @ GHC.Types.Char ww3 ww4 })) } } }) -}
ddbe11a40fd300b45d8e9b9af8e406c8
  $sinsert_$sgo10 ::
    SymbolTable.IdName
    -> a1
    -> Data.Map.Base.Map SymbolTable.IdName a1
    -> Data.Map.Base.Map SymbolTable.IdName a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
eecd95289213555aae150259770d3fe1
  $slookup1 ::
    SymbolTable.IdName
    -> Data.Map.Base.Map SymbolTable.IdName a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
9384194c5f6b6bb2ab62bd82980f9973
  $smember1 ::
    SymbolTable.IdName
    -> Data.Map.Base.Map SymbolTable.IdName a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5e7285a8e035a995010815bde9dedcb2
  $tc'Entry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8601116585057429163##
                   9237521028937925761##
                   SymbolTable.$trModule
                   SymbolTable.$tc'Entry1) -}
b383b555effb6632e755db98a6966f93
  $tc'Entry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Entry"#) -}
3481a1e1719083a97c2d91df8592b2ed
  $tc'ValEmpty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7666221563109078989##
                   8243167720531086612##
                   SymbolTable.$trModule
                   SymbolTable.$tc'ValEmpty1) -}
72a8241cecb86fe43aeaa6ad180b335e
  $tc'ValEmpty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ValEmpty"#) -}
75b3758db9bdff751e70e1fea6cf55a4
  $tc'ValFloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1134879418108479420##
                   15041511183174803433##
                   SymbolTable.$trModule
                   SymbolTable.$tc'ValFloat1) -}
469051ba99b6b33939802585c9140e1e
  $tc'ValFloat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ValFloat"#) -}
e78ddba6a51809d14b2cdf09a4b0d0d3
  $tc'ValInteger :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11293683602946833696##
                   5625261702386196911##
                   SymbolTable.$trModule
                   SymbolTable.$tc'ValInteger1) -}
12e0173bfa7632777426670c075fb1d8
  $tc'ValInteger1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ValInteger"#) -}
649a93291d18803e00ebbfbd08b1556a
  $tc'ValStr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13575914457046847073##
                   16920333955253159467##
                   SymbolTable.$trModule
                   SymbolTable.$tc'ValStr1) -}
a480ce9fbe42f67b4e00fe2f4d52b069
  $tc'ValStr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ValStr"#) -}
b4e542cda32dd128540a410059bd8aa4
  $tcEntry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1020629252962781206##
                   17670647338432089677##
                   SymbolTable.$trModule
                   SymbolTable.$tcEntry1) -}
3f53901a75902230fed04911d32d2769
  $tcEntry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Entry"#) -}
7826766ca3f998c5893aa042280b3b02
  $tcIdValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1268652899848809126##
                   14930587208777250389##
                   SymbolTable.$trModule
                   SymbolTable.$tcIdValue1) -}
4686a60cf919b38c3b0d0c8608b58152
  $tcIdValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IdValue"#) -}
994cff1f1218648b2f6e003fdf490dcf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SymbolTable.$trModule2
                   SymbolTable.$trModule1) -}
062e3efb1adbd3afcd00229e95b624d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SymbolTable"#) -}
830af7f6052ce7d5cf29c38b7726481a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "assign2-0.1.0.0-HR9hU8cIXLf43tgzC2vdOI"#) -}
c548569925daeb4ad7769a1b269be0f7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> SymbolTable.Entry -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: SymbolTable.Entry)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        SymbolTable.$fShowEntry2
                        (AST.$w$cshowsPrec4 w `cast` (SymbolTable.N:Entry[0]) w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           SymbolTable.$fShowEntry2
                           (AST.$w$cshowsPrec4
                              w `cast` (SymbolTable.N:Entry[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) }) -}
c548569925daeb4ad7769a1b269be0f7
  newtype Entry = Entry SymbolTable.IdType
192f9079c0075dd77b1610fdb6d36815
  type IdName = GHC.Base.String
42ecb058c885d534d59ee05ff463d966
  type IdType = AST.Type
7d5255da21a3678bba31742a6dc29f08
  data IdValue
    = ValEmpty
    | ValStr GHC.Base.String
    | ValFloat GHC.Types.Float
    | ValInteger GHC.Integer.Type.Integer
fe186585a8ff0d6813211e32dd062175
  addSym ::
    SymbolTable.IdName
    -> SymbolTable.Entry
    -> Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry
    -> Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, True)
                (\ (key :: SymbolTable.IdName)
                   (entry :: SymbolTable.Entry)
                   (map :: Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry) ->
                 SymbolTable.$sinsert_$sgo10 @ SymbolTable.Entry key entry map) -}
526541488193e1aaf3df5b38614543ea
  getInfo ::
    GHC.Base.Maybe SymbolTable.Entry
    -> GHC.Base.Maybe SymbolTable.IdType
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe SymbolTable.Entry) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ SymbolTable.IdType
                   GHC.Base.Just ds1
                   -> GHC.Base.Just
                        @ SymbolTable.IdType
                        ds1 `cast` (SymbolTable.N:Entry[0]) }) -}
1b2c70ff3d4649639b22030391541855
  getSym ::
    SymbolTable.IdName
    -> Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry
    -> GHC.Base.Maybe SymbolTable.Entry
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (name :: SymbolTable.IdName)
                   (map :: Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry) ->
                 SymbolTable.$slookup1 @ SymbolTable.Entry name map) -}
cab3e032ed427b870da424efadae6e3b
  hasKey ::
    SymbolTable.IdName
    -> Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (key :: SymbolTable.IdName)
                   (map :: Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry) ->
                 SymbolTable.$smember1 @ SymbolTable.Entry key map) -}
8f20cabd599486a00452f74753fe5d90
  newMap :: Data.Map.Base.Map SymbolTable.IdName SymbolTable.Entry
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Base.Tip @ SymbolTable.IdName @ SymbolTable.Entry) -}
829afe857898bfa2a4d268f34c19be51
  parseEntry :: SymbolTable.Entry -> SymbolTable.IdType
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SymbolTable.parseEntry1
                  `cast`
                (<SymbolTable.Entry>_R ->_R SymbolTable.N:Entry[0]) -}
20a24de4b28034e0ed0fa38a8785ad88
  parseEntry1 :: SymbolTable.Entry -> SymbolTable.Entry
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: SymbolTable.Entry) -> ds) -}
9fd73b60849baadee25956ce926622a6
  removeJust :: GHC.Base.Maybe SymbolTable.Entry -> SymbolTable.Entry
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe SymbolTable.Entry) ->
                 case ds of wild {
                   GHC.Base.Nothing -> SymbolTable.removeJust1
                   GHC.Base.Just e -> e }) -}
e387cfa80bc3893f83b1d738a62d3eb3
  removeJust1 :: SymbolTable.Entry
  {- Strictness: x -}
558166e79701383391f2bae8e775f1ad
  toString ::
    [(SymbolTable.IdName, SymbolTable.Entry)] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [SymbolTable.Entry]
  = SymbolTable.$fEqEntry
instance [safe] GHC.Classes.Eq [SymbolTable.IdValue]
  = SymbolTable.$fEqIdValue
instance [safe] GHC.Show.Show [SymbolTable.Entry]
  = SymbolTable.$fShowEntry
instance [safe] GHC.Show.Show [SymbolTable.IdValue]
  = SymbolTable.$fShowIdValue
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

